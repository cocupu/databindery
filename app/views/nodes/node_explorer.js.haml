%script
  // Init the viewmodel.  This should be at the bottom of the page (or at least after the HTML it's applying bindings to)
  ko.applyBindings(nodeExplorerViewModel);

  
-content_for :head do
  :javascript
    
    //
    // Rudimentary memoization of Entities & Models
    //
    var memoCache = {}

    memoLookup = function (model, id) {
      if (memoCache.hasOwnProperty(model) && memoCache[model][id])  {
        return memoCache[model][id];
        }
    }
    
    memo = function (model, id, object) {
      if (!memoCache.hasOwnProperty(model)) memoCache[model] = {};
      memoCache[model][id] = object;
      return object;
    }
    
    createOrUpdateMemo = function (model, id, data) {
      obj = memoLookup(model, id)
      if (obj) { return obj.constructor(data) }
      obj = new model(data);
      return memo(model, id, data);
    }
    
    // Alias for memoLookup
    getObject = function(model, id) {
      return memoLookup(model,id);
    }
    
  
    //
    // Models
    //
    function Model(data) {
        this.name = ko.observable(data.name);
        this.labelField = data.label;
        this.id = data.id;
        this.relativeUrl = "#" + data.id;
        this.pool = data.pool;
        this.identity = data.identity;
        this.fields = $.map(data.fields, function(item) { return new ModelField(item) });         
        this.associations = $.map(data.associations, function(item) {return new ModelAssociation(item)});  
    }
    
    function ModelField(data) {
      this.code = data.code;
      this.name = data.name;
      this.type = data.type;
    }
    
    function ModelAssociation(data) {
      this.code = data.code;
      this.name = data.name;
      this.type = data.type;
      this.label = data.label;
      this.reference = data.references;
      this.searchContext = new SearchContext({"title":"Search for "+data.label+" to Associate", "queryParams":{}, "model_id":data.references, "association_code":data.code})
    }
    
    function Entity(data) {
        this.persistent_id = data.persistent_id;
        // Currently this assumes that all of the models have already been cached locally!
        this.model = memoLookup(Model, data.model_id);
        // URL is not returned on search results, so setting it manually instead of using data.url
        this.url = "/#{params[:identity_id]}/#{params[:pool_id]}/nodes/"+data.persistent_id; 
        //this.associations = data.associations;
        this.associations = buildAssociationsHash(this.model.associations) 
        reifyAssociations(this.associations, data.associations) 
        this.unreifiedAssociations = data.associations
        this.title = data.title;
        this.data = data.data;
        this.lastSavedAt = ko.observable("");
        this.asJSON = function() {
          var json = {"persistent_id":this.persistent_id,"data":this.data};
          json["associations"] = unreifyAssociations(this.model.associations, this.associations)
          return json;
        };
    }
    
    // Uses Model Association to sets up a Hash of observableArrays for associations to be inserted to.
    function buildAssociationsHash(modelAssociations) {
      associationsHash = {}
      modelAssociations.forEach( function(modelAssociation) {
        associationsHash[modelAssociation.code] = ko.observableArray([]);
      });
      return associationsHash;
    };
    
    // Iterate over each association key in associationsAsIds, reifying each persistent id from the associated Array 
    function reifyAssociations(associationsHash, associationsAsIds) {
      deferreds = []
      for(associationKey in associationsAsIds) {
        idsToLookup = associationsAsIds[associationKey];
        if (idsToLookup != null) { 
          idsToLookup.forEach(function(itemId) {
            deferreds.push( objectLoaded(Entity, itemId) );
          });
        };
       };
       lastDeferred = deferreds[deferreds.length-1]
       $.when(lastDeferred).then(function(){
        for(associationKey in associationsAsIds) {
          idsToLookup = associationsAsIds[associationKey];
          if (idsToLookup != null) {
            idsToLookup.forEach(function(itemId) {
              entity = getObject(Entity, itemId)
              associationsHash[associationKey].push( entity );
             });
            };
          };
       });
      return associationsHash;
    };
    
    // Reduce associated entities back down to an array of pids
    function unreifyAssociations(modelAssociations,associationsHash) {
      unreifiedAssociations = {};
      modelAssociations.forEach(function(modelAssociation) {
        entitiesToUnreify = associationsHash[modelAssociation.code]();
        if (entitiesToUnreify === null) {
          pidArray = [];
        } else {
          pidArray = entitiesToUnreify.map(function(assoc){
            if (typeof assoc === "object") {
              return assoc.persistent_id;
            } else if (typeof assoc === "string") {
              return assoc;
            }
          });
        };
        unreifiedAssociations[modelAssociation.code] = pidArray;
      });
      return unreifiedAssociations;
    }
    
    function SearchContext(data) {
      this.title = data.title;
      this.queryParams = data.queryParams;
      this.model_id = data.model_id;
      this.association_code = data.association_code;
      this.results = ko.observableArray([]);
      this.query = ko.observable("");
      // this.selected = ko.observableArray([]);
      this.selectedIds = ko.observableArray([]);
      this.selected = ko.computed(function(){ 
        return this.selectedIds().map(function(itemId) {return memoLookup(Entity, itemId)});
       }, this);
    }
    
    //
    // Methods for Loading Data
    //
    
    // Returns a promise object.  When the promise is resolved, the requested object is available in memoCache
    objectLoaded = function(model, id) {
      // Try to load from memoCache 
      cached = memoLookup(model, id);
      // Return a resolved promise if the object was cached, otherwise, load JSON via Ajax Request & return the promise from that Ajax request
      if (cached) { 
        dfd = $.Deferred();
        dfd.resolve;
        return dfd; 
      } else {
        switch(model)
        {
        case Entity:
          return loadEntity(id);
          break;
        case Model:
          return loadModel(id);        
          break;
        default:
          dfd.reject();
          return dfd;
          break;
        } 
      }
    };
    
    // expects a string that is the desired Entity's persistent_id
    // Returns a promise object from the getJSON request.  On success, will put the entity in memoCache for retrieval.
    self.loadEntity = function(entity_id) {
      // Otherwise load from server & cache the resulting object for future use
      return $.getJSON("/#{params[:identity_id]}/#{params[:pool_id]}/nodes/"+entity_id, function(data) {
          entity = new Entity(data);
          // Memoize the object
          memo(Entity, entity.persistent_id, entity);
      });
    }
    
    // expects a string that is the desired Model's id
    // Returns a promise object from the getJSON request.  On success, will put the entity in memoCache for retrieval.
    // Currently API doesn't support loading individual models, so this loads ALL models & shoves them in cache.
    self.loadModel = function(model_id) {
      // Load all models from server, convert them to Model instances, then populate self.models
      $.getJSON("/#{params[:identity_id]}/#{params[:pool_id]}/models", function(allData) {
          allData.forEach(function(item){
            m = new Model(item) 
            memo(Model, m.id, m)
          });
      });
    }
    
    //
    // Preloading info
    //
    
    var modelsJson = #{@pool.models.to_json}
    var mappedModels = $.map(modelsJson, function(item) { 
      m = new Model(item) 
      return memo(Model, m.id, m)
    });
    memo(Entity, "#{@node.persistent_id}", new Entity(#{@node.to_json}))
    
    // Load initial state from server, convert it to Model instances, then populate self.models
    $.getJSON("/#{params[:identity_id]}/#{params[:pool_id]}/models", function(allData) {
        var mappedModels = $.map(allData, function(item) { 
          m = new Model(item) 
          return memo(Model, m.id, m)
        });
        //self.models(mappedModels);
    });
    
    //
    // ViewModel
    //
    function NodeExplorerViewModel() {

        
        // Data
        var self = this;
        self.currentEntity = ko.observable(memoLookup(Entity, "#{@node.persistent_id}"));
        self.selectedSearchContext = ko.observable();
        self.models = ko.observableArray(mappedModels);
    
        //
        // Behaviors
        //
        self.runEntitySearch = function(searchContext) {
          data = searchContext.queryParams;
          data["q"] = searchContext.query();
          data["model_id"] = searchContext.model_id;
          $.getJSON("/#{params["identity_id"]}/#{params["pool_id"]}/nodes/search?", data, function(allData) {
              var mappedResults = $.map(allData, function(item) { return memo(Entity, item.persistent_id, new Entity(item)) });
              searchContext.results(mappedResults);
          });
        }
      
        self.openAssociationSearchPane = function(association) {
          var searchContext = association.searchContext;
          self.runEntitySearch(searchContext);
          self.selectedSearchContext(searchContext);
        }
      
        self.deselectEntityFromSearch = function(entity) {
          self.selectedSearchContext().selected.remove(entity);
        }
      
        self.submitSelectedFromSearch = function(searchContext) {
          // Init the association on the entity if it's not there.
          existing_assoc = self.currentEntity().associations[searchContext.association_code]
          self.currentEntity().associations[searchContext.association_code] = (typeof existing_assoc === 'undefined') ? [] : existing_assoc;
        
          // Add selected associations to the entity
          searchContext.selected().forEach(function(association){ 
            self.currentEntity().associations[searchContext.association_code].push(association)
          });
          self.updateEntity(self.currentEntity());
        }
      
        self.updateEntity = function(entity) {
          $.ajax(entity.url+".json", {
              data: ko.toJSON({ node: entity.asJSON(), _method: "put"}),
              type: "put", contentType: "application/json",
              success: function(result) { 
                now = new Date()
                clock = now.getHours()+':'+now.getMinutes().leftZeroPad(2)+':'+now.getSeconds().leftZeroPad(2)
                entity.lastSavedAt("last saved at "+ clock); 
              }
          });
        };
      
    };  
    // Put the viewmodel in a variable so functions can grab it.
    var nodeExplorerViewModel = new NodeExplorerViewModel();