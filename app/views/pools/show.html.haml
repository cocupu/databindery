-content_for :head do
  :javascript
    //
    // Rudimentary memoization of Entities & Models
    //
    var memoCache = {Entity: {}, Model: {}}

    memoLookup = function (model, id) {
      if (memoCache.hasOwnProperty(model) && memoCache[model][id])  return memoCache[model][id];
    }
    
    memo = function (model, id, object) {
      if (!memoCache.hasOwnProperty(model)) memoCache[model] = {};
      memoCache[model][id] = object;
      return object;
    }
    
    createOrUpdateMemo = function (model, id, data) {
      obj = memoLookup(model, id)
      if (obj) { return obj.constructor(data) }
      obj = new model(data);
      return memo(model, id, data);
    }
    // TODO: memoized AJAX load -- use jQuery deffered?
  
    //
    // Models
    //
    function Model(data) {
        this.name = ko.observable(data.name);
        this.labelField = data.label;
        this.id = data.id;
        this.relativeUrl = "#" + data.id;
        this.pool = data.pool;
        this.identity = data.identity;
        this.fields = $.map(data.fields, function(item) { return new ModelField(item) });         
        this.associations = data.associations;  
    }
    function ModelField(data) {
      this.code = data.code;
      this.name = data.name;
      this.type = data.type;
    }
    function Entity(data) {
        this.persistent_id = data.persistent_id;
        // Currently this assumes that all of the models have already been cached locally!
        this.model = memoLookup(Model, data.model_id)
        // URL is not returned on search results, so setting it manually instead of using data.url
        this.url = "#{params["id"]}/nodes/"+data.persistent_id;        
        this.associations = data.associations;
        this.title = data.title;
        this.data = data.data;
        this.lastSavedAt = ko.observable("");
    }

    //
    // ViewModel
    //
    function PoolExplorerViewModel() {
        // Data
        var self = this;
        self.models = ko.observableArray([]);
        self.results = ko.observableArray([]);
        self.selectedModel = ko.observable();
        self.entityQuery = ko.observable("");
        self.selectedEntities = ko.observableArray([]);
        
        self.viewModes = ko.observableArray(['Explore', 'Grid Edit']);
        self.currentViewMode = ko.observable( self.viewModes()[0] );
        
        // Load initial state from server, convert it to Model instances, then populate self.models
        $.getJSON("#{params["id"]}/models", function(allData) {
            var mappedModels = $.map(allData, function(item) { 
              m = new Model(item) 
              return memo(Model, m.id, m)
            });
            self.models(mappedModels);
        });
        
        // Behaviours    
        self.openModelSearchPane = function(model) {
          // Can't DRY this b/c need to set selectedModel after entities are loaded
          $.getJSON("#{params["id"]}/models/"+model.id+"/nodes/search", function(allData) {
              var mappedResults = $.map(allData, function(item) { return new Entity(item) });
              self.results(mappedResults);
              self.selectedModel(model);
          });
        };
        
        self.runEntitySearch = function(currentModelValue) {
          var query = "q=" + self.entityQuery();
          $.getJSON("#{params["id"]}/models/"+self.selectedModel().id+"/nodes/search?"+query, function(allData) {
              var mappedResults = $.map(allData, function(item) { return new Entity(item) });
              self.results(mappedResults);
          });
        }
        
        self.setViewMode = function(newMode) {
          self.currentViewMode(newMode);
        }
        
        self.openEntity = function(entity) {
          self.selectedEntities.push(entity);
        }
        
        self.closeEntity = function(entity) {
          self.selectedEntities.remove(entity);
        }
        
        // Mainly for loading entities whose partial info was listed in search results or associations Arrays
        // expects a string that is the desired Entity's persistent_id
        self.loadAndOpenEntity = function(entity_id) {
          // Try to load from memoCache 
          cached = memoLookup(Entity, entity_id);
          if (cached)  return self.selectedEntities.push(cached);
          // Otherwise load from server & cache the resulting object for future use
          $.getJSON("#{params["id"]}/nodes/"+entity_id, function(data) {
              entity = new Entity(data)
              // Memoize the object
              memo(Entity, entity.persistent_id, entity);
              self.selectedEntities.push(entity);
          });
        }
        
        self.updateEntity = function(entity) {
          $.ajax(entity.url+".json", {
              data: ko.toJSON({ node: entity, _method: "put"}),
              type: "put", contentType: "application/json",
              success: function(result) { 
                now = new Date()
                clock = now.getHours()+':'+now.getMinutes().leftZeroPad(2)+':'+now.getSeconds().leftZeroPad(2)
                entity.lastSavedAt("last saved at "+ clock); 
              }
          });
        };
    };
    
    var poolExplorerViewModel = new PoolExplorerViewModel();
    
%nav#menu-nav{"data-bind" => "visible: $root.currentViewMode() == 'Explore'"}
  %ul#menu-nav-tabs.nav.nav-tabs
    %li.active 
      %a{href:"#models"} Entities
    %li 
      %a{href:"#data-sources"} Data Sources
  #menu-tab-content.tab-content
    %ul#models.tab-pane.active.models.nav.nav-pills.nav-stacked{"data-bind" => "foreach: models"}
      %li.model
        %a{"data-bind" => "text: name, click: $root.openModelSearchPane, attr: {href: relativeUrl}"}

= render file: "nodes/search"

#panels{style: "width: 1301px;", "data-bind" => "visible: $root.currentViewMode() == 'Explore'"}  
  = render file: "nodes/show"
  
= render file: "nodes/edit_grid" 

%script
  ko.applyBindings(poolExplorerViewModel);


